import json
import logging
from aiogram import Router, types
from aiogram.types import LabeledPrice, PreCheckoutQuery
from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError
from aiogram.exceptions import TelegramAPIError

from services.database import async_session
from models.models import Payment, Post
from config import PAYMENT_PROVIDER_TOKEN
from services.slot_manager import find_nearest_slots

logger = logging.getLogger("payment_handlers")
router = Router()


@router.callback_query(lambda c: c.data.startswith("pay_post:"))
async def handle_payment(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å", –≥–¥–µ callback_data –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç "pay_post:<post_id>".
    –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è-–∏–Ω–≤–æ–π—Å–∞ –≤ –±–∞–∑–µ (–Ω–æ–≤–æ–µ –ø–æ–ª–µ invoice_message_id –≤ –º–æ–¥–µ–ª–∏ Payment).
    """
    # –£–¥–∞–ª—è–µ–º inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

    try:
        _, post_id_str = callback.data.split(":")
        post_id = int(post_id_str)
    except ValueError:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã.")
        return

    user_id = callback.from_user.id
    bot = callback.bot

    async with async_session() as session:
        try:
            # –ò—â–µ–º –ø–æ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º ID –∏ —Å—Ç–∞—Ç—É—Å–æ–º "accepted" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(Post).where(
                    Post.id == post_id,
                    Post.user_id == user_id,
                    Post.status == "accepted"
                )
            )
            post = result.scalars().first()

            if not post:
                await callback.message.answer("‚ùå –ü–æ—Å—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î (Payment), –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å –ø–æ–ª–µ invoice_message_id (String).
            payment_record = Payment(
                user_id=user_id,
                post_id=post.id,
                amount=100.0,
                status="pending",
                payment_id=None,
                invoice_message_id=None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è ID —Å–æ–æ–±—â–µ–Ω–∏—è-–∏–Ω–≤–æ–π—Å–∞
            )
            session.add(payment_record)
            await session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è provider_data
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å email/phone/—Ü–µ–Ω—ã –∏ —Ç.–¥.
            provider_data_dict = {
                "receipt": {
                    "customer": {
                        "email": "example@example.com",
                        "phone": "79211234567"
                    },
                    "items": [
                        {
                            "description": f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ID {post.id}",
                            "quantity": "1.0",
                            "amount": {
                                "value": "100.00",
                                "currency": "RUB"
                            },
                            "vat_code": "1",               # –°—Ç–∞–≤–∫–∞ –ù–î–°, –ø—Ä–∏–º–µ—Ä
                            "payment_mode": "full_payment",
                            "payment_subject": "commodity"
                        }
                    ],
                    "tax_system_code": 1
                }
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è provider_data
            try:
                invoice_msg = await bot.send_invoice(
                    chat_id=user_id,
                    title="–û–ø–ª–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞",
                    description=f"–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ ID {post.id}",
                    provider_token=PAYMENT_PROVIDER_TOKEN,
                    currency="RUB",
                    prices=[LabeledPrice(label="–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞", amount=10000)],
                    start_parameter="publish",
                    payload=str(post.id),
                    provider_data=json.dumps(provider_data_dict)  # <-- –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è-–∏–Ω–≤–æ–π—Å–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ str) –≤ payment_record
                payment_record.invoice_message_id = str(invoice_msg.message_id)
                await session.commit()

            except TelegramAPIError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞: {e}")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}", exc_info=True)
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")


@router.pre_checkout_query()
async def process_pre_checkout_query(query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pre_checkout_query –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º payment_id (Telegram Payment ID) –ø–µ—Ä–µ–¥ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π.
    """
    logger.info(f"üìå –ü–æ–ª—É—á–µ–Ω pre_checkout_query: {query}")

    async with async_session() as session:
        try:
            payment_result = await session.execute(
                select(Payment).where(
                    Payment.user_id == query.from_user.id,
                    Payment.post_id == int(query.invoice_payload)
                )
            )
            payment = payment_result.scalars().first()

            if payment:
                payment.payment_id = query.id  # Telegram Payment ID
                await session.commit()
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω payment_id {query.id} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ post_id={query.invoice_payload}")
            else:
                logger.warning(
                    f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î (user_id={query.from_user.id}, post_id={query.invoice_payload})"
                )
        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î –ø—Ä–∏ pre_checkout_query: {e}", exc_info=True)

    await query.bot.answer_pre_checkout_query(query.id, ok=True)


@router.message(lambda m: m.successful_payment is not None)
async def handle_successful_payment(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram.
    1) –ò—Å–ø–æ–ª—å–∑—É–µ–º invoice_payload, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å post_id.
    2) –û–±–Ω–æ–≤–ª—è–µ–º Payment (status='succeeded', payment_id).
    3) –û–±–Ω–æ–≤–ª—è–µ–º Post (status='paid').
    4) –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–≤–æ–π—Å, –µ—Å–ª–∏ invoice_message_id –µ—Å—Ç—å –≤ –±–∞–∑–µ.
    5) –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    user_id = message.from_user.id
    invoice_payload = message.successful_payment.invoice_payload

    try:
        post_id = int(invoice_payload)
    except ValueError:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ invoice_payload –≤ post_id", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.")
        return

    payment_charge_id = message.successful_payment.provider_payment_charge_id
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ successful_payment: {payment_charge_id} –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")

    async with async_session() as session:
        async with session.begin():
            # –ò—â–µ–º –∑–∞–ø–∏—Å—å Payment –≤ —Å—Ç–∞—Ç—É—Å–µ "pending"
            payment_result = await session.execute(
                select(Payment).where(
                    Payment.user_id == user_id,
                    Payment.post_id == post_id,
                    Payment.status == "pending"
                )
            )
            payment = payment_result.scalars().first()
            if not payment:
                logger.warning(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω (user_id={user_id}, post_id={post_id}).")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            payment.status = "succeeded"
            payment.payment_id = payment_charge_id

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
            post_result = await session.execute(
                select(Post).where(Post.id == post_id)
            )
            post = post_result.scalars().first()
            if post:
                post.status = "paid"
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ {post.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'paid'.")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment.id}")
                return
        await session.commit()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–≤–æ–π—Å, –µ—Å–ª–∏ invoice_message_id –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    invoice_msg_id = payment.invoice_message_id
    if invoice_msg_id:
        try:
            await message.bot.delete_message(chat_id=user_id, message_id=int(invoice_msg_id))
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–≤–æ–π—Å (ID={invoice_msg_id}).")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–≤–æ–π—Å: {e}")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    async with async_session() as session:
        try:
            from handlers.keyboards import generate_publish_keyboard
            nearest_slots = await find_nearest_slots(session)
            keyboard = generate_publish_keyboard(post_id, nearest_slots)
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=keyboard)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ª–æ—Ç–æ–≤: {e}")


def register_payment_handlers(dp):
    dp.include_router(router)
    dp.message.register(handle_successful_payment, lambda m: m.successful_payment is not None)
