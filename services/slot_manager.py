from datetime import datetime, timezone, timedelta
from zoneinfo import ZoneInfo

from sqlalchemy.future import select
from models.models import Post

from logs import get_logger
logger = get_logger("slot_manager")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã (UTC+2)
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (UTC+2)
SLOTS = [(7,10), (9,20), (11,54), (18,00),(23,35)]  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è

TOLERANCE = timedelta(seconds=10)  # –î–æ–ø—É—Å–∫ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–æ—Ç–∞

async def find_nearest_slots(session, num_slots=6):
    """
    –ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏ (UTC+2).
    - –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–ª–æ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    - –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–ª–æ—Ç—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
    """
    now = datetime.now(MOSCOW_TZ).replace(second=0, microsecond=0)
    logger.info(f"üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ª–æ—Ç–æ–≤. –°–µ–π—á–∞—Å {now.strftime('%Y-%m-%d %H:%M')} MSK")

    available_slots = []
    days_ahead = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è

    while len(available_slots) < num_slots:
        target_day = now + timedelta(days=days_ahead)
        for hour, minute in SLOTS:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
            slot_time = datetime.combine(target_day.date(), datetime.min.time(), tzinfo=MOSCOW_TZ).replace(
                hour=hour, minute=minute
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–ª–æ—Ç—ã
            if slot_time > now:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç —Å —É—á–µ—Ç–æ–º –¥–æ–ø—É—Å–∫–∞ TOLERANCE
                result = await session.execute(
                    select(Post.id).where(
                        Post.published_at.between(slot_time - TOLERANCE, slot_time + TOLERANCE)
                    )
                )
                if result.scalar() is None:  # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏, —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω
                    available_slots.append(slot_time)
            if len(available_slots) == num_slots:
                break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤
        days_ahead += 1  # –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å

    logger.info(f"üìÖ –ù–∞–π–¥–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ {len(available_slots)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {available_slots}")
    return available_slots
