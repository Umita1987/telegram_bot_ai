from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError

from handlers.keyboards import generate_publish_keyboard, generate_payment_keyboard
from services.database import async_session
from services.slot_manager import find_nearest_slots
from handlers.callback_handlers import generate_ad_text
from models.models import Post, Payment
from logs import get_logger

logger = get_logger("approval_handlers")
router = Router()


@router.callback_query(lambda c: c.data.startswith("accept_post:"))
async def accept_post(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ—Å—Ç–∞ (callback data: "accept_post:<post_id>")"""
    try:
        _, post_id_str = callback.data.split(":")
        post_id = int(post_id_str)
    except ValueError:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ—Å—Ç–∞.", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    async with async_session() as session:
        async with session.begin():
            post_result = await session.execute(select(Post).where(Post.id == post_id))
            post = post_result.scalars().first()

            if not post:
                await callback.message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
            payment_result = await session.execute(
                select(Payment).where(Payment.post_id == post.id, Payment.status == "succeeded")
            )
            payment = payment_result.scalars().first()

            # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
            await callback.message.edit_reply_markup(reply_markup=None)

            if payment:
                post.status = "paid"
                post_id_confirmed = post.id
                await session.commit()

                logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id_confirmed} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω.")

                slots = await find_nearest_slots(session)
                keyboard = generate_publish_keyboard(post_id_confirmed, slots)
                await callback.message.answer(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç.",
                    reply_markup=keyboard
                )
                return

            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Ç ‚Äì –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å "accepted" –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç—É
            post.status = "accepted"
            post_id_confirmed = post.id
            await session.commit()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –ø–æ—Å—Ç ID {post_id_confirmed}.")

            keyboard = generate_payment_keyboard(post_id_confirmed)
            await callback.message.answer(
                "‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ–ø–ª–∞—Ç–∏—Ç—å.",
                reply_markup=keyboard
            )

@router.callback_query(lambda c: c.data.startswith("publish_post:"))
async def publish_post(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ (callback data: "publish_post:<post_id>")."""
    try:
        _, post_id_str = callback.data.split(":")
        post_id = int(post_id_str)
    except ValueError:
        logger.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ—Å—Ç–∞.", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –£–±–∏—Ä–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    await callback.message.edit_reply_markup(reply_markup=None)

    user_id = callback.from_user.id

    async with async_session() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ post_id
            payment_result = await session.execute(
                select(Payment).where(Payment.post_id == post_id, Payment.status == "succeeded")
            )
            payment = payment_result.scalars().first()

            if not payment:
                logger.warning(f"‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç–∞ {post_id} —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.message.answer("‚ùå –û–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "paid"
            post_result = await session.execute(
                select(Post).where(Post.id == post_id, Post.status == "paid")
            )
            post = post_result.scalars().first()

            if not post:
                logger.error("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            logger.info(f"üîç –í—ã–±—Ä–∞–Ω –ø–æ—Å—Ç ID {post.id} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

            # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            nearest_slots = await find_nearest_slots(session)
            keyboard = generate_publish_keyboard(post.id, nearest_slots)

            await callback.message.answer(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                reply_markup=keyboard
            )


@router.callback_query(lambda c: c.data == "regenerate_text")
async def regenerate_text(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞."""
    try:
        user_id = callback.from_user.id

        async with async_session() as session:
            async with session.begin():
                post_result = await session.execute(
                    select(Post).where(Post.user_id == user_id, Post.status == "draft").order_by(Post.id.desc())
                )
                post = post_result.scalars().first()

                if not post:
                    await callback.message.answer("‚ùå –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

        # ‚úÖ –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await generate_ad_text(callback, state)
        logger.info(f"üîÑ –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ {post.id} –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω.")

    except SQLAlchemyError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")



def register_approval_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤."""
    dp.include_router(router)
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
