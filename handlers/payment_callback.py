from aiogram import Router, types
from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError

from services.database import async_session
from models.models import Payment, Post
from services.payments import check_and_update_payment
from services.slot_manager import find_nearest_slots
from handlers.keyboards import generate_publish_keyboard
from logs import get_logger

logger = get_logger("payment_callback")
router = Router()


@router.callback_query(lambda c: c.data.startswith("confirm_payment_"))
async def confirm_payment(callback_query: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ callback.
    """
    _, payment_id = callback_query.data.split("_")

    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            result = await session.execute(
                select(Payment)
                .where(Payment.payment_id == payment_id)
                .order_by(Payment.created_at.desc())  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂
            )
            payment = result.scalars().first()

            if not payment:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂: {payment_id}, post_id={payment.post_id}, status={payment.status}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if payment.status == "succeeded":
                await callback_query.answer("‚úÖ –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", show_alert=True)
                return

            if not await check_and_update_payment(payment, session):
                await callback_query.answer("‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
            post_result = await session.execute(
                select(Post).where(Post.id == payment.post_id)
            )
            post = post_result.scalars().first()

            if not post:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç {payment.post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç {post.id}.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
            post.status = "paid"
            await session.commit()

            # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            nearest_slots = await find_nearest_slots(session)
            keyboard = generate_publish_keyboard(post.id, nearest_slots)

            try:
                await callback_query.message.answer(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", reply_markup=keyboard
                )
                await callback_query.answer()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {payment.user_id}: {e}")

        except SQLAlchemyError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}", exc_info=True)
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)


def register_payment_callback_handlers(dp):
    dp.include_router(router)
