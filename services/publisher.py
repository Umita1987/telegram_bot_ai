# publisher.py
import re
import traceback
from zoneinfo import ZoneInfo

from aiogram import Bot
from sqlalchemy import select, update
from datetime import datetime
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
from config import TELEGRAM_TOKEN, TEST_CHANNEL_ID, CHANNEL_USERNAME
from models.models import Post
from services.database import async_session
from services.bitly_service import shorten_url
from logs import get_logger

logger = get_logger("publisher")
bot = Bot(token=TELEGRAM_TOKEN)
MOSCOW_TZ = ZoneInfo("Europe/Moscow")


def add_unique_query_param(url: str, post_id: int) -> str:
    logger.debug(f"–î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä post_id={post_id} –∫ URL: {url}")
    parsed = urlparse(url)
    query = parse_qs(parsed.query)
    query['post_id'] = str(post_id)
    new_query = urlencode(query, doseq=True)
    new_parsed = parsed._replace(query=new_query)
    result = urlunparse(new_parsed)
    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result


def remove_url(text: str, url: str) -> str:
    logger.debug(f"–£–¥–∞–ª—è–µ–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞: {url[:50]}...")
    pattern = re.compile(re.escape(url), re.IGNORECASE)
    return pattern.sub("", text)


def escape_markdown_v2(text: str) -> str:
    special_chars = r"_*[]()~`>#+=|{}.!-\\"
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text


def escape_markdown_v2_except_links(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç MarkdownV2, –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞ [—Ç–µ–∫—Å—Ç](url).
    –í–Ω—É—Ç—Ä–∏ —è–∫–æ—Ä—è —ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, URL —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è —á–∞—Å—Ç–∏—á–Ω–æ (—Å–∫–æ–±–∫–∏, –ø—Ä–æ–±–µ–ª—ã).
    """
    logger.debug("–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º MarkdownV2 (–∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫)")
    link_pattern = re.compile(r'\[([^\]]+)\]\(([^)]+)\)')
    result = ''
    last_end = 0

    def escape_text(s):
        return re.sub(r'([_\*\[\]\(\)~`>#+\-=|{}.!\\])', r'\\\1', s)

    for match in link_pattern.finditer(text):
        start, end = match.span()
        anchor, url = match.groups()

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Å—Å—ã–ª–∫–∏
        result += escape_text(text[last_end:start])

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É ‚Äî —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        escaped_url = url.replace("(", "\\(").replace(")", "\\)").replace(" ", "%20")
        escaped_anchor = escape_text(anchor)
        result += f"[{escaped_anchor}]({escaped_url})"

        last_end = end

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    result += escape_text(text[last_end:])
    return result


async def publish_to_channel(post_id: int) -> str:
    logger.info(f"üì§ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å ID: {post_id}")

    try:
        async with async_session() as session:
            async with session.begin():
                logger.debug(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç {post_id} –∏–∑ –ë–î...")
                result = await session.execute(
                    select(Post).where(Post.id == post_id).with_for_update()
                )
                post = result.scalars().first()

                if not post:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
                    return "‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

                logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î, —Å—Ç–∞—Ç—É—Å: {post.status}")

                if post.status in ("published", "publishing"):
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: {post.status})")
                    return "‚ö†Ô∏è –ü–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."

                logger.info(f"–ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ {post_id} –Ω–∞ 'publishing'")
                post.status = "publishing"
                await session.flush()

                current_post_id = post.id
                content_local = post.content
                description_local = post.description
                link_local = post.link
                image_url_local = post.image_url
                short_url_local = post.short_url

        logger.info(f"üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
        formatted_content = f"{content_local}\n\n{description_local}"

        if link_local:
            logger.info(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É: {link_local[:50]}...")
            unique_long_url = add_unique_query_param(link_local, current_post_id)

            try:
                logger.info("üîó –°–æ–∫—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Bitly...")
                short_url_local = shorten_url(unique_long_url) or unique_long_url
                logger.info(f"‚úÖ Bitly: {short_url_local[:50]}...")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Bitly: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
                logger.error(f"Traceback:\n{traceback.format_exc()}")
                short_url_local = unique_long_url

            formatted_content = remove_url(formatted_content, link_local)
            formatted_content += f"\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({short_url_local})"

        logger.info("‚öôÔ∏è –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º Markdown...")
        formatted_content = escape_markdown_v2_except_links(formatted_content)
        logger.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):\n{formatted_content[:200]}...")

        try:
            if image_url_local:
                logger.info(f"üì∑ –ü—É–±–ª–∏–∫—É–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {image_url_local[:100]}...")
                caption = formatted_content[:1024]
                logger.debug(f"Caption –¥–ª–∏–Ω–∞: {len(caption)} —Å–∏–º–≤–æ–ª–æ–≤")

                msg = await bot.send_photo(
                    chat_id=TEST_CHANNEL_ID,
                    photo=image_url_local,
                    caption=caption,
                    parse_mode="MarkdownV2"
                )
                logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id: {msg.message_id}")
            else:
                logger.info("üìù –ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                msg = await bot.send_message(
                    chat_id=TEST_CHANNEL_ID,
                    text=formatted_content,
                    parse_mode="MarkdownV2"
                )
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id: {msg.message_id}")

            # üéâ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                logger.info(f"üé≠ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {msg.message_id}...")
                from services.reaction_sender import send_reactions
                await send_reactions(channel_username=CHANNEL_USERNAME, message_id=msg.message_id)
                logger.info(f"‚úÖ –†–µ–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏: {e}")
                logger.warning(f"Traceback:\n{traceback.format_exc()}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ ID {current_post_id}: {e}")
            logger.error(f"Traceback:\n{traceback.format_exc()}")

            logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ {current_post_id} –≤ 'scheduled'")
            async with async_session() as session:
                async with session.begin():
                    await session.execute(
                        update(Post).where(Post.id == current_post_id).values(status="scheduled")
                    )
            return "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."

        logger.info(f"üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç {current_post_id} –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'published'...")
        async with async_session() as session:
            async with session.begin():
                await session.execute(
                    update(Post).where(Post.id == current_post_id).values(
                        telegram_message_id=msg.message_id,
                        published_at=datetime.now(MOSCOW_TZ),
                        status="published",
                        short_url=short_url_local
                    )
                )

        logger.info(f"‚úÖ –ü–æ—Å—Ç {current_post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! Message ID: {msg.message_id}")
        return "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ publish_to_channel –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        return f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"