import aiohttp
import base64
import logging
from typing import Optional
from sqlalchemy.ext.asyncio import AsyncSession
from models.models import Payment
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, YOOKASSA_URL

logger = logging.getLogger("payments")

HEADERS = {
    "Authorization": "Basic " + base64.b64encode(f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}".encode()).decode(),
    "Content-Type": "application/json"
}

async def get_payment_status(payment_id: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ /payments/{payment_id}, –≤–∫–ª—é—á–∞—è –≤–æ–∑–≤—Ä–∞—Ç—ã."""
    if not payment_id:
        raise ValueError("‚ùå –û—à–∏–±–∫–∞: payment_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{YOOKASSA_URL}/{payment_id}", headers=HEADERS) as payment_resp:
                if payment_resp.status == 200:
                    payment_result = await payment_resp.json()
                    refunded = float(payment_result.get("refunded_amount", {}).get("value", "0"))
                    paid = float(payment_result.get("amount", {}).get("value", "0"))

                    # üü° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
                    if refunded >= paid and paid > 0:
                        return "refunded"

                    return payment_result.get("status", "unknown")

                elif payment_resp.status == 404:
                    logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ YooKassa.")
                    return "not_found"
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API YooKassa: {payment_resp.status} - {await payment_resp.text()}")
                    return "error"

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return "error"



async def check_and_update_payment(session: AsyncSession, payment: Payment) -> Optional[bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î."""
    if not payment.payment_id:
        logger.warning(f"‚ö†Ô∏è –£ –ø–ª–∞—Ç–µ–∂–∞ {payment.id} –Ω–µ—Ç payment_id, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return None

    try:
        status = await get_payment_status(payment.payment_id)
        logger.info(f"üîî YooKassa —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment.payment_id}: {status}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment.payment_id}: {e}")
        return None

    if status == "succeeded":
        payment.status = "succeeded"
        await session.commit()
        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment.payment_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True

    elif status == "canceled":
        payment.status = "canceled"
        await session.commit()
        logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment.payment_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
        return False

    elif status == "refunded":
        payment.status = "refunded"
        await session.commit()
        logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment.payment_id} –±—ã–ª –≤–æ–∑–≤—Ä–∞—â—ë–Ω.")
        return False

    return None
