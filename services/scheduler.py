from datetime import datetime
import asyncio
from sqlalchemy.future import select
from aiogram import Bot

from config import TELEGRAM_TOKEN, TEST_CHANNEL_ID
from logs import get_logger
from models.models import Post, Payment
from services.database import async_session
from services.metrics import (
    POSTS_PUBLISHED,
    POSTS_FAILED,
    PAYMENT_REFUNDS,
    PUBLISH_LATENCY,
    CHECK_REFUNDS_LATENCY,
)
from services.payments import get_payment_status
from services.publisher import publish_to_channel
from services.random_post_publisher import publish_random_product
from services.slot_manager import SLOTS, MOSCOW_TZ, TOLERANCE

logger = get_logger("scheduler")
bot = Bot(token=TELEGRAM_TOKEN)


async def check_for_refunds_loop():
    while True:
        try:
            with CHECK_REFUNDS_LATENCY.time():
                logger.info("üö© –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞.")
                async with async_session() as session:
                    async with session.begin():
                        payments_query = await session.execute(
                            select(Payment).where(Payment.status.in_(["succeeded", "refunded"]))
                        )
                        payments = payments_query.scalars().all()

                        for payment in payments:
                            current_status = await get_payment_status(payment.payment_id)

                            if current_status == "refunded" and payment.status != "refunded":
                                payment.status = "refunded"
                                PAYMENT_REFUNDS.inc()

                                post_result = await session.execute(
                                    select(Post).where(Post.id == payment.post_id)
                                )
                                post = post_result.scalars().first()

                                if post:
                                    previous_status = post.status
                                    post.status = "canceled"

                                    if previous_status == "scheduled":
                                        logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ {post.id}")
                                    elif previous_status == "published":
                                        try:
                                            await bot.delete_message(
                                                chat_id=TEST_CHANNEL_ID,
                                                message_id=post.telegram_message_id
                                            )
                                            logger.info(f"‚úÖ –ü–æ—Å—Ç {post.id} —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                                        except Exception as e:
                                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")

                                    if post.user_id:
                                        try:
                                            await bot.send_message(
                                                post.user_id,
                                                f"‚ö†Ô∏è –í–∞—à –ø–æ—Å—Ç {post.id} –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω –∏–∑-–∑–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                                                f"–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                                            )
                                            logger.info(f"üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {post.user_id}")
                                        except Exception as e:
                                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                                logger.info(f"‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ {payment.payment_id}, –ø–æ—Å—Ç {payment.post_id} –æ—Ç–º–µ–Ω—ë–Ω.")
                    await session.commit()
        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –≤ check_for_refunds_loop: {e}", exc_info=True)

        await asyncio.sleep(60)


async def scheduled_post_loop():
    while True:
        sleep_duration = 60
        try:
            async with async_session() as session:
                now = datetime.now(MOSCOW_TZ).replace(second=0, microsecond=0)
                start_time = now - TOLERANCE
                end_time = now + TOLERANCE
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é ({now.strftime('%Y-%m-%d %H:%M')} MSK)")

                post_query = await session.execute(
                    select(Post).where(Post.published_at.between(start_time, end_time), Post.status == "scheduled")
                )
                posts = post_query.scalars().all()

                if posts:
                    for post in posts:
                        logger.info(f"üìå –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç ID {post.id}")
                        with PUBLISH_LATENCY.time():
                            publish_result = await publish_to_channel(post.id)

                        await session.refresh(post)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å telegram_message_id

                        if "‚úÖ" in publish_result:
                            POSTS_PUBLISHED.inc()
                            logger.info(f"‚úÖ –ü–æ—Å—Ç {post.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                            if post.user_id:
                                try:
                                    await bot.send_message(
                                        post.user_id,
                                        f"‚úÖ –í–∞—à –ø–æ—Å—Ç {post.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {now.strftime('%d.%m %H:%M')} MSK!\n"
                                        f"üîó [–°–º–æ—Ç—Ä–µ—Ç—å](https://t.me/wildberriesStuff1/{post.telegram_message_id})",
                                        parse_mode="Markdown"
                                    )
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                        else:
                            POSTS_FAILED.inc()
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post.id}")
                else:
                    slot_matched = False
                    for hour, minute in SLOTS:
                        slot_time = now.replace(hour=hour, minute=minute)
                        if abs((slot_time - now).total_seconds()) <= TOLERANCE.total_seconds():
                            slot_matched = True
                            logger.info("üü¢ –°–ª–æ—Ç –ø—É—Å—Ç ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä.")
                            await publish_random_product("products.txt")
                            break

                    if not slot_matched:
                        logger.info("‚ö™Ô∏è –ù–µ –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞ ‚Äî –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")

                next_post_query = await session.execute(
                    select(Post).where(Post.status == "scheduled", Post.published_at > now).order_by(Post.published_at)
                )
                next_post = next_post_query.scalars().first()

                if next_post:
                    delta = (next_post.published_at - now).total_seconds()
                    sleep_duration = min(max(delta - 30, 5), 60)
                    logger.info(
                        f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ {next_post.published_at.astimezone(MOSCOW_TZ).strftime('%d.%m %H:%M')} MSK."
                        f" –û–∂–∏–¥–∞–Ω–∏–µ: {sleep_duration} —Å–µ–∫."
                    )
                else:
                    logger.info("‚è≥ –°–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")

        except Exception as e:
            logger.error(f"üö® –û—à–∏–±–∫–∞ –≤ scheduled_post_loop: {e}", exc_info=True)

        await asyncio.sleep(sleep_duration)


async def scheduler():
    await asyncio.gather(
        check_for_refunds_loop(),
        scheduled_post_loop()
    )
