import re
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from handlers.keyboards import generate_generate_text_keyboard
from services.parser import parse_product
from services.parser_ozon import parse_ozon_with_zenrows_bs4
from config import ZENROWS_API_KEY

from logs import get_logger

logger = get_logger("user_handlers")

router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫
WILDBERRIES_URL_PATTERN = re.compile(r"https?://(www\.)?wildberries\.\w{2,3}/catalog/\d+")
OZON_URL_PATTERN = re.compile(r"https?://(www\.)?ozon\.ru/product/[^/]+-(\d+)/")


@router.message()
async def handle_user_message(message: Message, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ Wildberries –∏ Ozon.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞—Ä—Å–∏–Ω–≥–µ.
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.
    """
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤¬ª ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if message.text.strip() == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤":
        from handlers.stats_handlers import view_post_stats
        await view_post_stats(message)
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.strip().startswith("/"):
        return

    user_text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    current_state = await state.get_state()
    if current_state == "EditPostState:waiting_for_text":
        from handlers.callback_handlers import save_edited_text
        await save_edited_text(message, state)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –∏ –ø–∞—Ä—Å–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–∞—Ä—Å–µ—Ä–æ–º
    product_data = None

    if WILDBERRIES_URL_PATTERN.match(user_text):
        # –ü–∞—Ä—Å–∏–Ω–≥ Wildberries
        await message.reply("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ —Å Wildberries... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

        try:
            product_data = parse_product(user_text)
            if product_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö WB –≤ –æ–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                product_data = {
                    "title": product_data.get("name", ""),
                    "brand": "",  # WB –ø–∞—Ä—Å–µ—Ä –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—Ä–µ–Ω–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
                    "price": product_data.get("price", ""),
                    "description": product_data.get("description", ""),
                    "characteristics": {},  # WB –ø–∞—Ä—Å–µ—Ä –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
                    "image_url": product_data.get("image_url", ""),
                    "all_images": [product_data.get("image_url", "")] if product_data.get("image_url") else [],
                    "url": product_data.get("url", user_text),
                    "source": "wildberries"
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Wildberries: {e}")
            return

    elif OZON_URL_PATTERN.match(user_text):
        # –ü–∞—Ä—Å–∏–Ω–≥ Ozon
        await message.reply("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ —Å Ozon... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

        try:
            product_data = parse_ozon_with_zenrows_bs4(user_text, ZENROWS_API_KEY)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon: {e}")
            return

    else:
        await message.reply(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:\n"
            "‚Ä¢ Wildberries: https://www.wildberries.ru/catalog/...\n"
            "‚Ä¢ Ozon: https://www.ozon.ru/product/..."
        )
        return

    if not product_data:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞: {product_data['title'][:50]}... –∏–∑ {product_data['source']}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    await state.update_data(product_data=product_data)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = generate_generate_text_keyboard()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    source_name = "Wildberries" if product_data['source'] == "wildberries" else "Ozon"
    await message.reply(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Å {source_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç?",
        reply_markup=keyboard
    )


def register_user_handlers(dp):
    dp.include_router(router)