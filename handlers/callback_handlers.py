import logging
from aiogram import Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import update
from sqlalchemy.future import select

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏–∑ keyboards.py
from handlers.keyboards import generate_reply_main_menu, generate_full_action_keyboard
from models.models import Post, User
from services.content_generator import generate_product_description
from services.database import async_session

logger = logging.getLogger("callback_handlers")
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
class EditPostState(StatesGroup):
    waiting_for_text = State()


@router.callback_query(lambda c: c.data == "generate_text")
async def generate_ad_text(callback: CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""

    user_id = callback.from_user.id
    username = callback.from_user.username or "unknown_user"

    data = await state.get_data()
    if "product_data" not in data:
        await callback.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É.")
        return

    product_data = data["product_data"]

    try:
        publication_text = await generate_product_description(
            name=product_data["title"],
            description=product_data["description"]
        )
        publication_text = (
            f"‚ú® {publication_text} ‚ú®\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product_data['price']}\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —É–∂–µ —Å–µ–π—á–∞—Å –ø–æ —Å—Å—ã–ª–∫–µ: {product_data['url']}"
        )
        product_data["generated_description"] = publication_text
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        return

    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(select(User).filter_by(id=user_id))
                user = result.scalars().first()
                if not user:
                    new_user = User(id=user_id, username=username, is_premium=False)
                    session.add(new_user)

                post = Post(
                    user_id=user_id,
                    content=product_data["title"],
                    description=publication_text,
                    price=product_data["price"].replace("‚ÇΩ", "").strip(),
                    image_url=product_data.get("image_url"),
                    link=product_data.get("url"),
                    status="draft"
                )
                session.add(post)
                await session.flush()

                await session.execute(
                    update(Post)
                    .where(
                        Post.user_id == user_id,
                        Post.id != post.id,
                        Post.status.in_(["draft", "accepted", "paid"])
                    )
                    .values(status="obsolete")
                )
                post_id = post.id
            logger.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {post_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞.")
        return

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
    await callback.message.answer_photo(
        photo=product_data["image_url"],
        caption=publication_text,
        reply_markup=generate_full_action_keyboard(post_id)
    )


@router.callback_query(lambda c: c.data.startswith("edit_post_text:"))
async def edit_post_text(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞."""
    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    await callback.message.edit_reply_markup(reply_markup=None)

    try:
        post_id = int(callback.data.split(":")[1])
    except ValueError:
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    async with async_session() as session:
        async with session.begin():
            post_query = await session.execute(select(Post).where(Post.id == post_id))
            post = post_query.scalars().first()
            if not post:
                await callback.message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º post_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await state.update_data(editing_post_id=post.id, message_id=callback.message.message_id)
            await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            await state.set_state(EditPostState.waiting_for_text)

@router.message(EditPostState.waiting_for_text)
async def save_edited_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞."""
    new_text = message.text
    user_id = message.from_user.id
    try:
        async with async_session() as session:
            async with session.begin():
                data = await state.get_data()
                post_id = data.get("editing_post_id")
                if not post_id:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                    return

                post_query = await session.execute(select(Post).where(Post.id == post_id, Post.user_id == user_id))
                post = post_query.scalars().first()
                if not post:
                    await message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                post.description = new_text
                post.status = "draft"
                post_id = post.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            logger.info(f"‚úÖ –ü–æ—Å—Ç ID {post_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞.")
        return

    full_text = (
        f"‚ú® {new_text} ‚ú®\n\n"
        f"üí∞ –¶–µ–Ω–∞: {post.price} ‚ÇΩ\n"
        f"üì¶ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {post.link}"
    )
    try:
        await message.delete()
    except Exception:
        pass
    await message.answer_photo(
        photo=post.image_url,
        caption=full_text[:1024],
        reply_markup=generate_full_action_keyboard(post_id)
    )
    await state.clear()

@router.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        await callback.message.answer("üëá –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=generate_reply_main_menu())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.")

def register_callback_query_handlers(dp):
    dp.include_router(router)
