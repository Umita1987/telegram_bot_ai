import random
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji
from telethon.errors import RPCError
from logs import get_logger
from services.telethon_client import get_client

logger = get_logger("reaction_sender")

ALL_REACTIONS = ["üëç", "‚ù§Ô∏è", "üî•", "ü•∞", "üëè", "üéâ", "üòç"]
MAX_UNIQUE_REACTIONS = 11  # –õ–∏–º–∏—Ç –¥–ª—è –ø–∞–±–ª–∏–∫-–∫–∞–Ω–∞–ª–∞ Telegram

async def send_reactions(channel_username: str, message_id: int):
    client = get_client()
    try:
        entity = await client.get_entity(channel_username)
        message = await client.get_messages(channel_username, ids=message_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏
        existing_emojis = []
        if hasattr(message, "reactions") and message.reactions:
            for result in message.reactions.results:
                if hasattr(result.reaction, "emoticon"):
                    existing_emojis.append(result.reaction.emoticon)

        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Ä–µ–∞–∫—Ü–∏—è–º ‚Äî —Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        if len(existing_emojis) >= MAX_UNIQUE_REACTIONS:
            if not existing_emojis:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}.")
                return
            selected_emojis = random.choices(existing_emojis, k=random.randint(1, len(existing_emojis)))
        else:
            selected_emojis = random.choices(ALL_REACTIONS, k=random.randint(1, 3))

        selected_reactions = [ReactionEmoji(emoticon=emoji) for emoji in selected_emojis]

        await client(SendReactionRequest(
            peer=entity,
            msg_id=message_id,
            reaction=selected_reactions
        ))
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ {selected_emojis} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}")

    except RPCError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}")
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id}: {e}")