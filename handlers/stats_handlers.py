import html  # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
from datetime import timezone, timedelta
from typing import Union
from aiogram import Router, types
from aiogram.exceptions import TelegramAPIError
from sqlalchemy.future import select

from services.database import async_session
from models.models import Post

from logs import get_logger

logger = get_logger("stats_handlers")
router = Router()

def split_message_by_lines(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    lines = text.splitlines(keepends=True)
    messages = []
    current = ""
    for line in lines:
        if len(current) + len(line) > max_length:
            messages.append(current)
            current = line
        else:
            current += line
    if current:
        messages.append(current)
    return messages

@router.callback_query(lambda c: c.data == "view_post_stats")
@router.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤")
async def view_post_stats(event: Union[types.CallbackQuery, types.Message]):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤.
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä—ã, —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∫–ª–∏–∫–∏ –ø–æ Bitly-—Å—Å—ã–ª–∫–µ.
    """
    send = event.message.answer if isinstance(event, types.CallbackQuery) else event.answer

    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(Post)
                .where(Post.user_id == event.from_user.id, Post.status == "published")
                .order_by(Post.published_at.desc())
            )
            posts = result.scalars().all()

            if not posts:
                await send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.", parse_mode="HTML")
                return

            response_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –ø–æ—Å—Ç–æ–≤:</b>\n\n"

            for post in posts:
                if not post.telegram_message_id:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç {post.id}, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_message_id")
                    continue

                try:
                    from services.telegram_stats import get_post_stats
                    stats = await get_post_stats([post.telegram_message_id])
                    views = stats[0].get("views", "‚ùì") if stats and "views" in stats[0] else "‚ùì"
                    reactions = stats[0].get("reactions", "‚ùì") if stats and "reactions" in stats[0] else "‚ùì"
                except TelegramAPIError as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}: {e}")
                    views = "‚ùì"
                    reactions = "‚ùì"

                clicks = "‚ùì"
                if post.short_url:
                    try:
                        from services.bitly_service import get_link_clicks
                        click_count = await get_link_clicks(post.short_url)
                        if click_count is not None:
                            clicks = click_count
                        else:
                            clicks = "‚ùì"
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–∫–∞—Ö –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}: {e}")
                        clicks = "‚ùì"

                safe_id = html.escape(str(post.id))
                safe_date = html.escape(post.published_at.astimezone(timezone(timedelta(hours=3))).strftime(
                    '%d.%m.%Y %H:%M')) if post.published_at else "‚ùì"

                safe_link = html.escape(post.link) if post.link else "‚ùì"
                link_html = f"<a href=\"{safe_link}\">–ü–µ—Ä–µ–π—Ç–∏</a>" if safe_link != "‚ùì" else "‚ùì"
                safe_views = html.escape(str(views))
                safe_reactions = html.escape(str(reactions))
                safe_clicks = html.escape(str(clicks))

                response_text += (
                    f"üìå <b>ID –ø–æ—Å—Ç–∞:</b> {safe_id}\n"
                    f"üìÖ <b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {safe_date}\n"
                    f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link_html}\n"
                    f"üñ± <b>–ö–ª–∏–∫–∏:</b> {safe_clicks}\n"
                    f"üëÄ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {safe_views}\n"
                    f"üí¨ <b>–†–µ–∞–∫—Ü–∏–∏:</b> {safe_reactions}\n"
                    "-----------------------------------\n"
                )

            logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n{response_text}")

            messages = split_message_by_lines(response_text)
            for msg in messages:
                await send(msg, parse_mode="HTML")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}", exc_info=True)
            await send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤.", parse_mode="HTML")

def register_stats_handlers(dp):
    dp.include_router(router)
