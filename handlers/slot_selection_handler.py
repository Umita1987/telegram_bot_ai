from zoneinfo import ZoneInfo

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from services.database import async_session
from models.models import Post
from datetime import datetime, timezone, timedelta
from handlers.callback_handlers import back_to_main_menu
from logs import get_logger

logger = get_logger("slot_selection_handlers")
router = Router()

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

@router.callback_query(lambda c: c.data.startswith("slot_"))
async def slot_selection_handler(callback_query: types.CallbackQuery, state: FSMContext):
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω callback_query: {callback_query.data}")

    try:
        _, post_id_str, slot_time_str = callback_query.data.split("_")
        post_id = int(post_id_str)

        # –í—Ä–µ–º—è –∏–∑ callback –≤—Å–µ–≥–¥–∞ —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ (–±–µ–∑ –ø–æ—è—Å–∞)
        slot_time_naive = datetime.fromisoformat(slot_time_str)
        slot_time_msk = slot_time_naive.replace(tzinfo=MOSCOW_TZ)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC
        slot_time_utc = slot_time_msk.astimezone(timezone.utc)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback.data: {e}", exc_info=True)
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    try:
        async with async_session() as session:
            async with session.begin():
                result = await session.execute(select(Post).where(Post.id == post_id))
                post = result.scalars().first()

                if not post:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç ID {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                    return

                post.published_at = slot_time_utc  # –≤ –±–∞–∑–µ –≤—Å–µ–≥–¥–∞ UTC
                post.status = "scheduled"
                session.add(post)

                await session.flush()
                current_post_id = post.id

            logger.info(f"‚úÖ –ü–æ—Å—Ç {current_post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {slot_time_msk.strftime('%d.%m %H:%M')} MSK.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}", exc_info=True)
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    try:
        await callback_query.message.edit_reply_markup(reply_markup=None)
        logger.info(f"‚úÖ –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è ID {callback_query.message.message_id}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

    await callback_query.message.answer(
        f"‚úÖ –í–∞—à –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {slot_time_msk.strftime('%d.%m %H:%M')} MSK!"
    )

    logger.info(f"üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await back_to_main_menu(callback_query)

def register_slot_selection_handler(dp):
    dp.include_router(router)
