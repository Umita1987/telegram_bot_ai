import asyncio
import os

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from config import TELEGRAM_TOKEN, SENTRY_DSN
from handlers import register_all_handlers
from services.cleanup import schedule_cleanup
from services.metrics import start_prometheus_server
from services.redis_client import init_redis, close_redis
from services.scheduler import scheduler
from services.telethon_client import start_client, stop_client  # üìå –î–æ–±–∞–≤–ª—è–µ–º Telethon

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
from dotenv import load_dotenv
load_dotenv()

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry
import sentry_sdk
sentry_sdk.init(
    dsn=SENTRY_DSN,
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
)

# üîß –ü—Ä–æ–º–µ—Ç–µ—É—Å
start_prometheus_server()

# üìã –õ–æ–≥–≥–µ—Ä
from logs import get_logger

logger = get_logger("main.py")
logger.info("üöÄ Prometheus —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")
logger.info("üõ°Ô∏è Sentry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
# ü§ñ –ë–æ—Ç
bot = Bot(token=TELEGRAM_TOKEN)

async def main():
    """–ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
        redis = await init_redis()

        if redis is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        storage = RedisStorage(redis)
        dp = Dispatcher(storage=storage)
        register_all_handlers(dp)

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telethon-–∫–ª–∏–µ–Ω—Ç–∞...")
        await start_client()

        asyncio.create_task(scheduler())
        asyncio.create_task(schedule_cleanup())

        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sentry_sdk.capture_exception(e)  # ‚¨ÖÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ Sentry

    finally:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telethon-–∫–ª–∏–µ–Ω—Ç–∞...")
        await stop_client()

        await close_redis()
        logger.info("üî¥ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    asyncio.run(main())
