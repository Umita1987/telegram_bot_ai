# random_post_publisher.py

import random
import traceback
from datetime import datetime
from zoneinfo import ZoneInfo

from config import CHANNEL_USERNAME, ZENROWS_API_KEY
from services.parser import parse_product, parse_promo_products
from services.parser_ozon import parse_ozon_with_zenrows_bs4, parse_ozon_category_products, is_valid_product_image
from services.publisher import publish_to_channel
from models.models import Post
from services.database import async_session
from services.content_generator import generate_product_description_sync
from logs import get_logger

from services.reaction_sender import send_reactions
from sqlalchemy import select

logger = get_logger("random_post_publisher")
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

# URLs –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
WILDBERRIES_PROMO_URLS = [
    "https://www.wildberries.ru/catalog/zhenshchinam/odezhda/dzhempery-i-kardigany",
    "https://www.wildberries.ru/catalog/zhenshchinam/odezhda/bluzki-i-rubashki",
    "https://www.wildberries.ru/catalog/zhenshchinam/odezhda/platya",
    "https://www.wildberries.ru/catalog/zhenshchinam/odezhda/yubki"
]

OZON_CATEGORY_URLS = [
    "https://www.ozon.ru/highlight/gruppa-populyarnye-brendy-zh-2976006/",
    "https://www.ozon.ru/highlight/premium-zhenskiy-2816469/",
    "https://www.ozon.ru/category/platya-zhenskie-7502/"
]


def clean_ozon_price(price_str: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ —Å Ozon"""
    if not price_str:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    # –ó–∞–º–µ–Ω—è–µ–º "‚ÇΩc" –Ω–∞ "‚ÇΩ c" (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª)
    price = price_str.replace("‚ÇΩc", "‚ÇΩ c")
    return price


async def parse_wildberries_products():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å Wildberries"""
    promo_url = random.choice(WILDBERRIES_PROMO_URLS)
    logger.info(f"üî• –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å Wildberries: {promo_url}")

    try:
        products = parse_promo_products(promo_url, limit=50)
        logger.info(f"üìä WB —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(products)} URLs —Ç–æ–≤–∞—Ä–æ–≤")

        if not products:
            logger.error("‚ùå WB –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤!")
            return False

        random.shuffle(products)
        logger.info(f"üé≤ –ü–µ—Ä–µ–º–µ—à–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

        for i, product_url in enumerate(products, 1):
            try:
                logger.info(f"üì¶ [{i}/{len(products)}] –ü—Ä–æ–±—É–µ–º WB —Ç–æ–≤–∞—Ä: {product_url}")
                product_data = parse_product(product_url)
                logger.info(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ WB —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à—ë–Ω: {product_data}")

                if not product_data or not product_data.get("description") or not product_data.get("image_url"):
                    logger.warning(f"‚ùå –¢–æ–≤–∞—Ä {product_url} –Ω–µ–ø–æ–ª–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                unified_product_data = {
                    "title": product_data.get("name", ""),
                    "brand": "",
                    "price": product_data.get("price", ""),
                    "description": product_data.get("description", ""),
                    "characteristics": {},
                    "image_url": product_data.get("image_url", ""),
                    "url": product_data.get("url", product_url),
                    "source": "wildberries"
                }

                success = await process_and_publish_product(unified_product_data)
                if success:
                    logger.info(f"‚úÖ WB —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                    return True

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ WB {product_url}: {e}")
                logger.error(f"Traceback:\n{traceback.format_exc()}")
                continue

        logger.warning("‚ùå WB: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à—ë–ª")
        return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ parse_wildberries_products: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        return False


async def parse_ozon_products():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon"""
    category_url = random.choice(OZON_CATEGORY_URLS)
    logger.info(f"üî• –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å Ozon: {category_url}")

    try:
        products = parse_ozon_category_products(category_url, limit=20)
        logger.info(f"üìä Ozon —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª—É—á–µ–Ω–æ {len(products)} URLs —Ç–æ–≤–∞—Ä–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Ozon: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        from services.parser_ozon import get_fallback_ozon_urls
        products = get_fallback_ozon_urls()
        logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback URLs –¥–ª—è Ozon: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")

    if not products:
        logger.error("‚ùå Ozon: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")
        return False

    random.shuffle(products)
    logger.info(f"üé≤ –ü–µ—Ä–µ–º–µ—à–∞–Ω–æ {len(products)} Ozon —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

    for i, product_url in enumerate(products, 1):
        try:
            logger.info(f"üì¶ [{i}/{len(products)}] –ü—Ä–æ–±—É–µ–º Ozon —Ç–æ–≤–∞—Ä: {product_url}")
            product_data = parse_ozon_with_zenrows_bs4(product_url, ZENROWS_API_KEY)
            logger.info(f"üì¶ –ü–∞—Ä—Å–∏–Ω–≥ Ozon —Ç–æ–≤–∞—Ä–∞: {product_data.get('title', 'N/A') if product_data else 'None'}")

            if not product_data:
                logger.warning(f"‚ùå –¢–æ–≤–∞—Ä Ozon {product_url} –Ω–µ —Å–ø–∞—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            title = product_data.get("title", "").strip()
            price = product_data.get("price", "").strip()
            description = product_data.get("description", "").strip()
            characteristics = product_data.get("characteristics", {})

            if not title or title == "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" or len(title) < 3:
                logger.warning(f"‚ùå Ozon —Ç–æ–≤–∞—Ä: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ '{title}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            if not price:
                logger.warning(f"‚ùå Ozon —Ç–æ–≤–∞—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if not description and not characteristics:
                logger.info(
                    "‚ö†Ô∏è Ozon —Ç–æ–≤–∞—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
                )

            image_url = product_data.get("image_url", "")

            if not is_valid_product_image(image_url):
                logger.warning("‚ùå –¢–æ–≤–∞—Ä Ozon –∏–º–µ–µ—Ç –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.")
                logger.debug(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")

                all_images = product_data.get("all_images", [])
                valid_image_found = False

                for img in all_images:
                    if is_valid_product_image(img):
                        product_data["image_url"] = img
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img[:100]}...")
                        valid_image_found = True
                        break

                if not valid_image_found:
                    logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

            image_url = product_data.get("image_url", "")
            if image_url and any(
                    sz in image_url for sz in ['wc50', 'wc100', 'wc200', 'wc250', 'wc300', 'wc400', 'wc500']):
                logger.info("‚öôÔ∏è –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                for size in ['wc50', 'wc100', 'wc200', 'wc250', 'wc300', 'wc400', 'wc500']:
                    image_url = image_url.replace(size, 'wc1000')
                product_data["image_url"] = image_url
                logger.info(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–æ: {image_url[:100]}...")

            # –í–ê–ñ–ù–û: –ø–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            product_data["source"] = "ozon"

            success = await process_and_publish_product(product_data)
            if success:
                logger.info(f"‚úÖ Ozon —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ Ozon {product_url}: {e}")
            logger.error(f"Traceback:\n{traceback.format_exc()}")
            continue

    logger.warning("‚ùå Ozon: –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–∏–Ω –Ω–µ –ø–æ–¥–æ—à—ë–ª")
    return False


async def publish_random_product(products_file: str = None):
    """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ Ozon —Å fallback –ª–æ–≥–∏–∫–æ–π"""

    source = random.choice(["wildberries", "ozon"])
    logger.info(f"üé≤ –í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")

    success = False

    if source == "ozon":
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Ozon
        logger.info("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Ozon...")
        success = await parse_ozon_products()

        if not success:
            # –ï—Å–ª–∏ Ozon –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Wildberries
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Ozon, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Wildberries...")
            success = await parse_wildberries_products()

            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∏ —Å Ozon, –Ω–∏ —Å Wildberries")
    else:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Wildberries
        logger.info("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Wildberries...")
        success = await parse_wildberries_products()

        if not success:
            # –ï—Å–ª–∏ Wildberries –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Ozon
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Wildberries, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Ozon...")
            success = await parse_ozon_products()

            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∏ —Å Wildberries, –Ω–∏ —Å Ozon")

    if not success:
        logger.warning("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    else:
        logger.info("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


async def process_and_publish_product(product_data: dict, publish: bool = True) -> bool:
    """
    –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏ publish=False –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä —Ç–µ–∫—Å—Ç–∞,
    –Ω–æ –ù–ï –ø–∏—à–µ—Ç –≤ –ë–î, –ù–ï –ø—É–±–ª–∏–∫—É–µ—Ç –∏ –ù–ï —Å—Ç–∞–≤–∏—Ç —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî —É–¥–æ–±–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–æ–Ω–æ–≤.
    """
    try:
        logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞: {product_data.get('title', 'N/A')[:50]}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Ozon —Ç–æ–≤–∞—Ä–æ–≤
        if product_data.get("source") == "ozon":
            title = product_data.get("title", "").strip()
            price = product_data.get("price", "").strip()
            image_url = product_data.get("image_url", "")

            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, —Ü–µ–Ω—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
            if not title or title == "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" or len(title) < 3:
                logger.warning("‚ùå Ozon —Ç–æ–≤–∞—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False

            if not price:
                logger.warning("‚ùå Ozon —Ç–æ–≤–∞—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False

            if not image_url:
                logger.warning("‚ùå Ozon —Ç–æ–≤–∞—Ä: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False

        image_url = product_data.get("image_url", "")
        if not image_url:
            logger.error("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return False

        if not is_valid_product_image(image_url):
            logger.error(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É: {image_url}")
            return False

        if product_data.get("characteristics"):
            characteristics_text = "\n".join([f"{k}: {v}" for k, v in product_data["characteristics"].items()])
        else:
            characteristics_text = product_data.get("description", "")

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –Ω–∏ –æ–ø–∏—Å–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if not characteristics_text.strip():
            characteristics_text = "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"
            logger.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ–ª–ª–±—ç–∫–æ–º
        try:
            logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            generated_description = generate_product_description_sync(
                product_data["title"],
                characteristics_text
            )
            if not generated_description or generated_description.startswith("‚ùå"):
                raise RuntimeError("AI generation failed")
            logger.info("‚úÖ AI –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            generated_description = f"{product_data['title']}. –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ."

        # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –¥–ª—è Ozon —Ç–æ–≤–∞—Ä–æ–≤
        if product_data.get("source") == "ozon":
            formatted_price = clean_ozon_price(product_data.get("price", ""))
        else:
            formatted_price = product_data.get("price", "")

        full_description = (
            f"‚ú® {generated_description} ‚ú®\n\n"
            f"üí∞ –¶–µ–Ω–∞: {formatted_price}\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —É–∂–µ —Å–µ–π—á–∞—Å –ø–æ —Å—Å—ã–ª–∫–µ: {product_data['url']}"
        )

        if not publish:
            # DRY RUN: –Ω–∏—á–µ–≥–æ –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info("üß™ [DRY RUN] –ü–æ—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏):")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {product_data['title']}")
            logger.info(f"–¶–µ–Ω–∞: {formatted_price}")
            logger.info(f"–°—Å—ã–ª–∫–∞: {product_data['url']}")
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product_data['image_url'][:120]}")
            logger.debug(f"–¢–µ–∫—Å—Ç:\n{full_description}")
            return True

        # --- –†–µ–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∏–∂–µ ---
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

        async with async_session() as session:
            async with session.begin():
                post = Post(
                    user_id=None,
                    content=product_data["title"],
                    description=full_description,
                    price=formatted_price.replace("‚ÇΩ", "").replace("—Ä—É–±",
                                                                   "").strip() if formatted_price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    image_url=product_data["image_url"],
                    link=product_data["url"],
                    status="scheduled",
                    published_at=datetime.now(MOSCOW_TZ)
                )
                session.add(post)

            await session.flush()
            post_id = post.id
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î —Å ID: {post_id}")

        logger.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞–Ω–∞–ª...")
        publish_result = await publish_to_channel(post_id)

        if "‚úÖ" in publish_result:
            source_name = product_data.get('source', 'unknown')
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä –∏–∑ {source_name}: {publish_result}")

            async with async_session() as session:
                result = await session.execute(select(Post).where(Post.id == post_id))
                post_obj = result.scalar_one_or_none()

            if post_obj and post_obj.telegram_message_id:
                try:
                    logger.info(f"üé≠ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {post_obj.telegram_message_id}...")
                    await send_reactions(channel_username=CHANNEL_USERNAME, message_id=post_obj.telegram_message_id)
                    logger.info(f"üéâ –†–µ–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {post_obj.telegram_message_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –†–µ–∞–∫—Ü–∏–∏ –ù–ï –±—ã–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {post_obj.telegram_message_id}: {e}")

            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞: {publish_result}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞: {repr(e)}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        return False


async def local_parsing():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª (DRY RUN)"""
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)

    source = random.choice(["wildberries", "ozon"])
    print(f"üé≤ –í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: {source}")

    success = False

    if source == "ozon":
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Ozon...")
        category_url = random.choice(OZON_CATEGORY_URLS)
        print(f"üî• –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å Ozon: {category_url}")

        try:
            products = parse_ozon_category_products(category_url, limit=10)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Ozon: {e}")
            from services.parser_ozon import get_fallback_ozon_urls
            products = get_fallback_ozon_urls()
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback URLs –¥–ª—è Ozon")

        random.shuffle(products)
        ozon_success = False

        for product_url in products[:3]:
            try:
                print(f"\nüì¶ –ü–∞—Ä—Å–∏–º Ozon —Ç–æ–≤–∞—Ä: {product_url}")
                product_data = parse_ozon_with_zenrows_bs4(product_url, ZENROWS_API_KEY)

                print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –í–°–ï –î–ê–ù–ù–´–ï –¢–û–í–ê–†–ê:")
                if product_data:
                    for key, value in product_data.items():
                        if isinstance(value, dict):
                            print(f"   {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -> {dict(list(value.items())[:3])}")
                        elif isinstance(value, list):
                            print(f"   {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ -> {value[:3]}")
                        else:
                            print(f"   {key}: {str(value)[:100]}...")
                else:
                    print("   product_data = None")

                if not product_data:
                    print("‚ùå –¢–æ–≤–∞—Ä Ozon –Ω–µ —Å–ø–∞—Ä—à–µ–Ω")
                    continue

                # –ø–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                product_data["source"] = "ozon"

                # DRY RUN
                success = await process_and_publish_product(product_data, publish=False)
                if success:
                    print("   ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (DRY RUN, –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)")
                    ozon_success = True
                    break
                else:
                    print("   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ Ozon: {e}")
                continue

        if not ozon_success:
            print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Ozon, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Wildberries...")
            source = "wildberries"
        else:
            success = True

    if source == "wildberries" and not success:
        print("üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä —Å Wildberries...")
        promo_url = random.choice(WILDBERRIES_PROMO_URLS)
        print(f"üî• –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å Wildberries: {promo_url}")
        products = parse_promo_products(promo_url, limit=10)
        random.shuffle(products)

        for product_url in products[:3]:
            try:
                print(f"\nüì¶ –ü–∞—Ä—Å–∏–º WB —Ç–æ–≤–∞—Ä: {product_url}")
                product_data = parse_product(product_url)

                if not product_data or not product_data.get("description") or not product_data.get("image_url"):
                    print("‚ùå –¢–æ–≤–∞—Ä –Ω–µ–ø–æ–ª–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    continue

                unified_product_data = {
                    "title": product_data.get("name", ""),
                    "brand": "",
                    "price": product_data.get("price", ""),
                    "description": product_data.get("description", ""),
                    "characteristics": {},
                    "image_url": product_data.get("image_url", ""),
                    "url": product_data.get("url", product_url),
                    "source": "wildberries"
                }

                print("‚úÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï WILDBERRIES:")
                for key, value in unified_product_data.items():
                    if key == "description":
                        print(f"   {key}: {str(value)[:200]}...")
                    else:
                        print(f"   {key}: {value}")

                # DRY RUN
                success = await process_and_publish_product(unified_product_data, publish=False)
                if success:
                    print("   ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (DRY RUN, –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)")
                else:
                    print("   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞")
                break

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ WB: {e}")
                continue

    if not success:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")

    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")


# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio

    asyncio.run(local_parsing())