from config import TEST_CHANNEL_ID
from services.telethon_client import client

from logs import get_logger
logger = get_logger("stats_service")


def format_reactions(reactions) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–µ–∞–∫—Ü–∏–π –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "‚ù§ x2, üëç x3".
    –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–π".
    """
    try:
        # –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder
        if not reactions or not hasattr(reactions, 'results') or not reactions.results:
            return "–ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–π"

        formatted = []
        for rc in reactions.results:
            if hasattr(rc, 'reaction') and hasattr(rc, 'count'):
                emoticon = getattr(rc.reaction, "emoticon", "‚ùì")
                count = rc.count
                formatted.append(f"{emoticon} x{count}")
            else:
                formatted.append("‚ùì")

        return ", ".join(formatted)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}")
        return "–ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–π"


async def get_post_stats(post_ids):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∏—Ö ID –∏–∑ –∫–∞–Ω–∞–ª–∞.

    :param post_ids: –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π.
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø–æ—Å—Ç–∞–º —Å –∫–ª—é—á–∞–º–∏:
             "id", "views" –∏ "reactions".
    """
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏—Ö ID –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        messages = await client.get_messages(TEST_CHANNEL_ID, ids=post_ids)
        stats = []
        for message in messages:
            if message is None:
                continue
            stats.append({
                "id": message.id,
                "views": message.views if message.views is not None else "‚ùì",
                "reactions": format_reactions(message.reactions) if message.reactions is not None else "‚ùì"
            })
        return stats

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return []
