# -*- coding: utf-8 -*-
# parser.py
import time
import traceback

from selenium.webdriver.common.by import By

from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from logs import get_logger

logger = get_logger("parser")

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options


def get_chrome_driver() -> webdriver.Chrome:
    logger.info("üöó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome WebDriver...")
    chrome_options = Options()

    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("start-maximized")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
    )

    service = Service("/usr/bin/chromedriver")
    # service = Service("C:\\Users\\umita\\PycharmProjects\\scan_dir\\Downloads\\chromedriver-win64\\chromedriver.exe")

    try:
        driver = webdriver.Chrome(service=service, options=chrome_options)
        logger.info("‚úÖ Chrome WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return driver
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome WebDriver: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        raise


def parse_product(url: str) -> dict:
    logger.info(f"üîç –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä WB: {url}")
    driver = get_chrome_driver()
    try:
        logger.debug(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        driver.get(url)

        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å cookie-–±–∞–Ω–Ω–µ—Ä
        wait = WebDriverWait(driver, 20)
        try:
            ok_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), '–û–∫–µ–π')]")))
            ok_button.click()
            logger.info("Cookie-–±–∞–Ω–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")
        except Exception:
            logger.debug("Cookie-–±–∞–Ω–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —Å–∫—Ä—ã—Ç.")

        time.sleep(5)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—Å–µ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—Å—è
        logger.debug("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (5 —Å–µ–∫)")

        screenshot_path = "/mnt/data/wb_product_page.png"
        driver.save_screenshot(screenshot_path)
        logger.debug(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")

        try:
            logger.debug("–ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            name_selectors = [
                "h3.mo-typography.productTitle--J2W7I",
                "h1.productTitle--J2W7I",
                "h3.productTitle--J2W7I",
                "h1[data-link='text{:product^goodsName}']",
                ".product-page__title",
                "h1.product-page__title",
                "[data-link*='goodsName']",
                "h3[class*='productTitle']",
                "h1[class*='productTitle']"
            ]
            name = None
            for selector in name_selectors:
                try:
                    name_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                    name = name_element.text.strip()
                    if name:
                        logger.info(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}): {name[:50]}...")
                        break
                except:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                    continue

            if not name:
                name = "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                logger.warning("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
        except Exception as e:
            name = "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")

        logger.debug("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É...")
        price = extract_price(wait)

        # –û–ø–∏—Å–∞–Ω–∏–µ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        try:
            logger.debug("–ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 2);")
            time.sleep(2)
            logger.debug("–ü—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

            # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
            button_patterns = [
                "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ",
                "–û–ø–∏—Å–∞–Ω–∏–µ",
                "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
                "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
            ]

            for pattern in button_patterns:
                try:
                    buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{pattern}')]")
                    for button in buttons:
                        try:
                            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                            time.sleep(0.5)
                            driver.execute_script("arguments[0].click();", button)
                            logger.info(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ: {pattern}")
                            time.sleep(2)
                        except:
                            pass
                except:
                    pass

            # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –∫–ª–∏–∫–æ–≤
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight / 2);")
            time.sleep(2)

            # –†–ê–°–®–ò–†–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            description_selectors = [
                # –ù–æ–≤—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–º–µ—Ä–æ–≤
                "p.mo-typography.descriptionText--Jq9n2",
                "p.descriptionText--Jq9n2",

                # –ë–æ–ª–µ–µ –æ–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                "p[class*='descriptionText']",
                "div[class*='description'] p",

                # –°—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                ".option__text",
                "[data-link*='description']",
                ".product-page__description",
                ".collapsible__content",
                ".j-description",

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "div.collapsible__content--opened p",
                "div[class*='collapsible'][class*='opened'] p",
                ".product-card__description",

                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
                "article p",
                "section p"
            ]

            description = None
            logger.debug("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º...")

            for selector in description_selectors:
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector}: –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                    for element in elements:
                        text = element.get_attribute("textContent").strip()
                        if text and len(text) > 50:  # –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
                            description = text
                            logger.info(
                                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}), –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                            break

                    if description:
                        break
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                    continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º XPath
            if not description:
                logger.debug("–ü—Ä–æ–±—É–µ–º XPath –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è...")
                xpath_selectors = [
                    "//p[contains(@class, 'description')]",
                    "//div[contains(@class, 'description')]//p",
                    "//p[string-length(text()) > 100]",  # –õ—é–±–æ–π p —Å —Ç–µ–∫—Å—Ç–æ–º > 100 —Å–∏–º–≤–æ–ª–æ–≤
                ]

                for xpath in xpath_selectors:
                    try:
                        elements = driver.find_elements(By.XPATH, xpath)
                        logger.debug(f"XPath {xpath}: –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                        for element in elements:
                            text = element.text.strip()
                            if text and len(text) > 50:
                                description = text
                                logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (XPath: {xpath}), –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                                break

                        if description:
                            break
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ —Å XPath {xpath}: {e}")
                        continue

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –≤–µ—Å—å –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if not description:
                logger.debug("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                try:
                    body_text = driver.find_element(By.TAG_NAME, "body").text
                    # –ò—â–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü
                    paragraphs = [p.strip() for p in body_text.split('\n\n') if len(p.strip()) > 100]
                    if paragraphs:
                        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –∞–±–∑–∞—Ü, –∏—Å–∫–ª—é—á–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                        description = max(paragraphs, key=len)
                        logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ body.text, –¥–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ body: {e}")

            if not description:
                description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                logger.warning("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                driver.save_screenshot("/mnt/data/description_error.png")
                with open("/mnt/data/page_source.html", "w", encoding="utf-8") as f:
                    f.write(driver.page_source)
                logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")

        except Exception as e:
            description = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            logger.error(f"Traceback:\n{traceback.format_exc()}")

        try:
            logger.debug("–ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
            img_selectors = [
                "img.photo-zoom__preview.j-zoom-image",
                ".swiper-slide img",
                ".product-page__photo img",
                "[data-link*='photo'] img",
                ".carousel-image img",
                "img[src*='images.wbstatic.net']"
            ]

            img_url = None
            for selector in img_selectors:
                try:
                    img_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                    img_url = img_element.get_attribute("src")
                    if img_url and "wbstatic" in img_url:
                        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}): {img_url[:100]}...")
                        break
                except:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                    continue

            if not img_url:
                img_url = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                logger.warning("‚ùå URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
        except Exception as e:
            img_url = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        result = {
            "name": name,
            "price": price,
            "description": description,
            "url": url,
            "image_url": img_url,
        }

        logger.info(f"‚úÖ WB —Ç–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω: '{name[:50]}...' | {price}")
        return result

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞ {url}: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        return None
    finally:
        logger.debug("–ó–∞–∫—Ä—ã–≤–∞–µ–º WebDriver")
        driver.quit()


def extract_price(wait) -> str:
    try:
        logger.debug("–ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞...")
        price_selectors = [
            "ins.priceBlockFinalPrice--iToZR",
            ".price-block__final-price",
            "[data-link*='priceU']",
            ".price",
            ".product-page__price-block .price-block__final-price",
            "ins.price"
        ]

        for selector in price_selectors:
            try:
                price_element = wait.until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                )
                price_text = price_element.get_attribute("innerHTML").strip().replace("&nbsp;", " ")
                if price_text:
                    logger.info(f"‚úÖ –¶–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}): {price_text}")
                    return price_text
            except:
                logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–Ω—ã {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                continue

        logger.warning("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º")
        return "–¶–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return "–¶–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"


def parse_promo_products(promo_url: str, limit: int = 20) -> list[str]:
    logger.info(f"üåê –ü–∞—Ä—Å–∏–º –∫–∞—Ç–∞–ª–æ–≥ WB: {promo_url}")
    driver = get_chrome_driver()
    product_urls = []
    try:
        logger.debug(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥: {promo_url}")
        driver.get(promo_url)
        wait = WebDriverWait(driver, 20)

        logger.debug("–ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤...")
        card_selectors = [
            "a.product-card__link",
            ".product-card a[href]",
            "[data-link*='catalog'] a",
            ".goods-tile a"
        ]

        cards = []
        for selector in card_selectors:
            try:
                wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                cards = driver.find_elements(By.CSS_SELECTOR, selector)
                if cards:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                    break
                else:
                    logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            except:
                logger.debug(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                continue

        if not cards:
            logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞—à—ë–ª –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤!")
            driver.save_screenshot("wb_catalog_error.png")
            logger.info("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: wb_catalog_error.png")
            return product_urls

        logger.debug(f"–ò–∑–≤–ª–µ–∫–∞–µ–º URLs –∏–∑ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ (–ª–∏–º–∏—Ç: {limit})...")
        for card in cards[:limit]:
            href = card.get_attribute("href")
            if href and "/catalog/" in href:
                product_urls.append(href)

        logger.info(f"‚úÖ WB –∫–∞—Ç–∞–ª–æ–≥: —Å–æ–±—Ä–∞–Ω–æ {len(product_urls)} URLs —Ç–æ–≤–∞—Ä–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—ã {promo_url}: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
    finally:
        logger.debug("–ó–∞–∫—Ä—ã–≤–∞–µ–º WebDriver")
        driver.quit()

    return product_urls


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
    test_product_url = "https://www.wildberries.ru/catalog/333634669/detail.aspx"

    print(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞: {test_product_url}")
    product_data = parse_product(test_product_url)

    if product_data:
        print("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['name']}")
        print(f"   –¶–µ–Ω–∞: {product_data['price']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {product_data['description'][:100]}...")
        print(f"   URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {product_data['image_url']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–∞")

    test_promo_urls = [
        "https://www.wildberries.ru/catalog/zhenshchinam/odezhda/bluzki-i-rubashki",
    ]

    for test_promo_url in test_promo_urls:
        print(f"\nüè∑Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: {test_promo_url}")
        promo_products = parse_promo_products(test_promo_url, limit=5)

        if promo_products:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(promo_products)} —Ç–æ–≤–∞—Ä–æ–≤:")
            for i, url in enumerate(promo_products, 1):
                print(f"   {i}. {url}")
            break
        else:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")