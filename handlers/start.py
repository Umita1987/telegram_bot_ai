
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from handlers.keyboards import generate_reply_main_menu
from services.database import async_session
from models.models import Post
from sqlalchemy.future import select

from logs import get_logger

logger = get_logger("start")
router = Router()


def get_main_keyboard():
    return generate_reply_main_menu()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start, —Ä–∞–∑–±–∏–≤ —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    parts = message.text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else ""

    if args == "after_payment":
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
        return

    user_data = await state.get_data()
    if not user_data.get("first_time"):
        await state.update_data(first_time=True)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏ Ozon, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /about, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=get_main_keyboard()
        )


@router.message(Command("about"))
async def about_command(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ Telegram. "
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!"
    )


def split_message(text: str, max_length: int = 4000) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length —Å–∏–º–≤–æ–ª–æ–≤."""
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]


@router.message(lambda message: message.text == "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã")
async def view_published_posts(message: Message):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    async with async_session() as session:
        result = await session.execute(
            select(Post)
            .where(Post.user_id == user_id, Post.status == "published")
            .order_by(Post.published_at.desc())
        )
        posts = result.scalars().all()

    if not posts:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
    else:
        response = "üìù –í–∞—à–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
        for post in posts:
            response += (
                f"üìå [{post.content[:30]}...] (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {post.published_at.strftime('%H:%M UTC')})\n"
                f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–Ω–∞–ª–µ](https://t.me/wildberriesStuff1/{post.telegram_message_id})\n\n"
            )
        MAX_LENGTH = 4000
        if len(response) > MAX_LENGTH:
            parts = split_message(response, MAX_LENGTH)
            for part in parts:
                await message.answer(part, parse_mode="Markdown")
        else:
            await message.answer(response, parse_mode="Markdown")


@router.message(lambda message: message.text == "‚ûï –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø–æ—Å—Ç")
async def add_new_post(message: Message):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç.
    """
    await message.answer(
        "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries, –∏ —è –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é!"
    )


@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤")
async def redirect_to_stats(message: Message):
    from handlers.stats_handlers import view_post_stats  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ stats_handlers.py
    await view_post_stats(message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è



def register_start_handlers(dp):
    dp.include_router(router)